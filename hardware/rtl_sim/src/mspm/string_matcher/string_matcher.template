`include "./src/struct_s.sv"
//`define DUMMY
module string_matcher (
    front_clk,
    front_rst,
    back_clk,
    back_rst,
    in_data,
    in_valid,
    in_sop,
    in_eop,
    in_empty,
    in_ready,
    in_meta_data,
    in_meta_valid,
    in_meta_ready,
    out_data,
    out_valid,
    out_almost_full,
    out_last,
    out_meta_data,
    out_meta_valid,
    out_meta_ready,
        // status register bus
    clk_status,
    status_addr,
    status_read,
    status_write,
    status_writedata,
    status_readdata,
    status_readdata_valid
);

input front_clk;
input front_rst;
input back_clk;
input back_rst;
input [255:0] in_data;
input in_valid;
input in_sop;
input in_eop;
input [4:0] in_empty;
output logic in_ready;
input metadata_t in_meta_data;
input in_meta_valid;
output logic in_meta_ready;
output metadata_t out_meta_data;
output logic out_meta_valid;
input logic out_meta_ready;
output logic [127:0] out_data;
output logic out_valid;
output logic out_last;
input out_almost_full;
// status register bus
input   logic          clk_status;
input   logic   [29:0] status_addr;
input   logic          status_read;
input   logic          status_write;
input   logic   [31:0] status_writedata;
output  logic   [31:0] status_readdata;
output  logic          status_readdata_valid;

`ifdef DUMMY
{% for i in range(0,15)%}
metadata_t meta_data_r{{i}};
logic meta_valid_r{{i}};
{% endfor %}

assign in_meta_ready = 1'b1;

always @ (posedge front_clk) begin
    if(front_rst)begin
{% for i in range(0,15)%}
        meta_valid_r{{i}} <= 0;
{% endfor %}
        out_meta_valid <= 0;
    end else begin
        meta_data_r0 <= in_meta_data;
        meta_valid_r0 <= in_meta_valid;
{% for i in range(0,14)%}
        meta_data_r{{i+1}} <= meta_data_r{{i}};
        meta_valid_r{{i+1}} <= meta_valid_r{{i}};
{% endfor %}
        out_meta_data <= meta_data_r14;
        out_meta_valid <= meta_valid_r14;
    end
end

assign in_ready = 1;
assign out_data = 0;
dc_fifo_wrapper_mlab #(
    .SYMBOLS_PER_BEAT(1),
    .BITS_PER_SYMBOL(1),
    .FIFO_DEPTH(32),
    .USE_PACKETS(0)
)
dc_fifo_mlab (
	.in_clk                 (front_clk),                 
	.in_reset_n             (!front_rst),        
	.out_clk                (back_clk),                 
	.out_reset_n            (!back_rst),        
	.in_data                (1'b1),              
	.in_valid               (in_valid & in_eop),             
	.in_ready               (),             
	.in_startofpacket       (),     
	.in_endofpacket         (),       
	.in_empty               (),              
	.out_data               (out_last),              
	.out_valid              (out_valid),             
	.out_ready              (!out_almost_full),             
	.out_startofpacket      (),     
	.out_endofpacket        (),       
	.out_empty              ()              
);

`else
///////NOT DUMMY////////////
logic [255:0] in_data_r1;
logic [255:0] in_data_r2;
logic         in_valid_r1;
logic         in_valid_r2;
logic         in_sop_r1;
logic         in_sop_r2;
logic         in_eop_r1;
logic         in_eop_r2;
logic [4:0]   in_empty_r1;
logic [4:0]   in_empty_r2;

metadata_t  internal_meta_data;
logic       internal_meta_valid;
logic       internal_meta_ready;

{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
logic [RID_WIDTH-1:0] hash_out_{{i}}_{{j}};
logic hash_out_valid_filter_{{i}}_{{j}};
rule_s_t din_{{i}}_{{j}};
rule_s_t din_{{i}}_{{j}}_r1;
rule_s_t din_{{i}}_{{j}}_r2;
logic din_valid_{{i}}_{{j}};
logic din_valid_{{i}}_{{j}}_r1;
logic din_valid_{{i}}_{{j}}_r2;
logic [2:0] din_valid_{{i}}_{{j}}_r;
logic din_ready_{{i}}_{{j}};
logic din_almost_full_{{i}}_{{j}};
{% endfor %}
{% endfor %}

logic out_new_pkt;

logic [255:0] in_convt;
logic gap;

//status 
logic [7:0] status_addr_r;
logic [STAT_AWIDTH-1:0]  status_addr_sel_r;
logic status_write_r;
logic status_read_r;
logic [31:0] status_writedata_r;
logic [31:0] status_readdata_sm;
logic status_readdata_valid_sm;
logic [31:0] status_readdata_back;
logic status_readdata_valid_back;
logic [31:0] test_valid_cnt = 0;
logic [31:0] test_empty;
{% for i in range(0,context['bucket_size'])%}
logic [31:0] test_din_{{i}};
logic [31:0] test_din_r2_{{i}};
{% endfor %}

{% for j in range(0,context['byte_size'])%}
assign in_convt[7+{{j}}*8:0+{{j}}*8] = in_data[255-{{j}}*8:255-7-{{j}}*8];
{% endfor %}

always @ (posedge front_clk) begin
    //in_ready <= {% for i in range(0,context['bucket_size'])%} {% for j in range(0,context['byte_size'])%} !din_almost_full_{{i}}_{{j}} & {% endfor %} {% endfor %} !gap;
    in_ready <= {% for i in range(0,context['bucket_size'])%} {% for j in range(0,context['byte_size'])%} !din_almost_full_{{i}}_{{j}} & {% endfor %} {% endfor %} 1;
    //in_ready <= !in_eop; //create a gap
    
    in_data_r1 <= in_convt;
    in_data_r2 <= in_data_r1;

    //only valid when the input is dequeued. 
    in_valid_r1 <= in_valid;
    in_valid_r2 <= in_valid_r1;
    in_sop_r1 <= in_sop;
    in_sop_r2 <= in_sop_r1;
    in_eop_r1 <= in_eop;
    in_eop_r2 <= in_eop_r1;
    in_empty_r1 <= in_empty;
    in_empty_r2 <= in_empty_r1;
end

assign gap = (in_eop & in_valid & in_ready);

always@(posedge front_clk)begin
    if(front_rst)begin
        out_meta_valid <= 0;
    end else begin
        if(out_new_pkt)begin
            out_meta_valid <= 1;
        end else begin
            out_meta_valid <= 0;
        end
    end
    if(out_new_pkt)begin
        out_meta_data <= internal_meta_data;
        out_meta_data.pkt_flags <= PKT_DONE;
    end
end

assign internal_meta_ready = out_new_pkt;
//assign in_meta_ready = in_ready;

always@(posedge front_clk)begin
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
    din_valid_{{i}}_{{j}} <= out_new_pkt | hash_out_valid_filter_{{i}}_{{j}};
    din_valid_{{i}}_{{j}}_r1 <= din_valid_{{i}}_{{j}};
    din_valid_{{i}}_{{j}}_r2 <= din_valid_{{i}}_{{j}}_r1;

    din_{{i}}_{{j}}.data <= hash_out_valid_filter_{{i}}_{{j}} ? hash_out_{{i}}_{{j}} : 0;
    din_{{i}}_{{j}}.last <= out_new_pkt;
    {% if i == 0 %}
    din_{{i}}_{{j}}.bucket <= 0;
    {% elif i==1 %}
    din_{{i}}_{{j}}.bucket <= 1;
    {% elif i==2 %}
    din_{{i}}_{{j}}.bucket <= 2;
    {% elif i==3 %}
    din_{{i}}_{{j}}.bucket <= 3;
    {% elif i==4 %}
    din_{{i}}_{{j}}.bucket <= 4;
    {% elif i==5 %}
    din_{{i}}_{{j}}.bucket <= 5;
    {% elif i==6 %}
    din_{{i}}_{{j}}.bucket <= 6;
    {% elif i==7 %}
    din_{{i}}_{{j}}.bucket <= 7;
    {% endif %}


    din_{{i}}_{{j}}_r1 <= din_{{i}}_{{j}};
    din_{{i}}_{{j}}_r2 <= din_{{i}}_{{j}}_r1;
{% endfor %}
{% endfor %}
end

//Instantiation
fifo_wrapper #(
    .SYMBOLS_PER_BEAT(1),
    .BITS_PER_SYMBOL(META_WIDTH),
    .FIFO_DEPTH(512)
) meta_fifo (
	.clk               (front_clk),                      
	.reset             (front_rst),            
	.in_data           (in_meta_data),          
	.in_valid          (in_meta_valid),         
	.in_ready          (in_meta_ready),         
	.out_data          (internal_meta_data),                        
	.out_valid         (internal_meta_valid),                       
	.out_ready         (internal_meta_ready)                       
);


frontend front(
    .clk(front_clk),
    .rst(front_rst),
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
    .hash_out_{{i}}_{{j}}(hash_out_{{i}}_{{j}}),
    .hash_out_valid_filter_{{i}}_{{j}}(hash_out_valid_filter_{{i}}_{{j}}),
{% endfor %}
{% endfor %}
    .in_data(in_data_r2),
    .in_valid(in_valid_r2),
    .in_sop(in_sop_r2),
    .in_eop(in_eop_r2),
    .in_empty(in_empty_r2),
    .out_new_pkt(out_new_pkt)
);

//RuleID reduction logic
backend back(
    .front_clk(front_clk),
    .front_rst(front_rst),
    .back_clk(back_clk),
    .back_rst(back_rst),
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,context['byte_size']) %}
    .din_{{i}}_{{j}}(din_{{i}}_{{j}}_r2),
    .din_valid_{{i}}_{{j}}(din_valid_{{i}}_{{j}}_r2),
    .din_almost_full_{{i}}_{{j}}(din_almost_full_{{i}}_{{j}}),
{% endfor %}
{% endfor %}
    .ruleID(out_data),
    .ruleID_valid(out_valid),
    .ruleID_last(out_last),
    .ruleID_almost_full(out_almost_full),
    .clk_status         (clk_status),
    .status_addr        (status_addr),
    .status_read        (status_read),
    .status_write       (status_write),
    .status_writedata   (status_writedata),
    .status_readdata    (status_readdata_back),
    .status_readdata_valid (status_readdata_valid_back)
);


//get stats
/*
always@(posedge front_clk)begin
    if(front_rst)begin
        test_valid_cnt <= 0;
        test_empty <= 0;
{% for i in range(0,context['bucket_size']) %}
        test_din_{{i}} <= 0;
{% endfor %}
    end else begin
        if(in_valid & in_ready)begin
            test_valid_cnt <= test_valid_cnt + 1;
            if(in_eop) begin
                test_empty <= in_empty;
            end
        end

{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,context['byte_size']) %}
        din_valid_{{i}}_{{j}}_r[0] <= din_valid_{{i}}_{{j}};
        din_valid_{{i}}_{{j}}_r[1] <= din_valid_{{i}}_{{j}}_r[0];
        din_valid_{{i}}_{{j}}_r[2] <= din_valid_{{i}}_{{j}}_r[1];
        if(din_valid_{{i}}_{{j}}_r == 3'b010)begin
            test_din_{{i}}[{{j}}] <= 1'b1;
        end
{% endfor %}
{% endfor %}
    end
end

//registers
always @(posedge clk_status) begin
    status_addr_r           <= status_addr[7:0];
    status_addr_sel_r       <= status_addr[29:30-STAT_AWIDTH];

    status_read_r           <= status_read;
    status_readdata_valid_sm <= 1'b0;

    if (status_read_r) begin
        if (status_addr_sel_r == TEST1) begin
            status_readdata_valid_sm <= 1'b1;
            case (status_addr_r)
                8'd0  : status_readdata_sm <= test_valid_cnt;
                8'd1  : status_readdata_sm <= test_empty;
                8'd2  : status_readdata_sm <= test_din_0; 
                8'd3  : status_readdata_sm <= test_din_1; 
                8'd4  : status_readdata_sm <= test_din_2; 
                8'd5  : status_readdata_sm <= test_din_3; 
                8'd6  : status_readdata_sm <= test_din_4; 
                8'd7  : status_readdata_sm <= test_din_5; 
                8'd8  : status_readdata_sm <= test_din_6; 
                8'd9  : status_readdata_sm <= test_din_7; 
                8'd10  : status_readdata_sm <= test_din_r2_0; 
                8'd11  : status_readdata_sm <= test_din_r2_1; 
                8'd12  : status_readdata_sm <= test_din_r2_2; 
                8'd13  : status_readdata_sm <= test_din_r2_3; 
                8'd14  : status_readdata_sm <= test_din_r2_4; 
                8'd15  : status_readdata_sm <= test_din_r2_5; 
                8'd16  : status_readdata_sm <= test_din_r2_6; 
                8'd17  : status_readdata_sm <= test_din_r2_7; 

                default : status_readdata_sm <= 32'h1234;
            endcase
        end
    end
end

//Top has higher priority.
always @(posedge clk_status) begin
    if(status_readdata_valid_sm)begin
        status_readdata_valid <= 1'b1;
        status_readdata <= status_readdata_sm;
    end else if(status_readdata_valid_back)begin
        status_readdata_valid <= 1'b1;
        status_readdata <= status_readdata_back;
    end else begin
        status_readdata_valid <= 1'b0;
    end
end
*/
assign status_readdata_valid = 1'b0;

//Stats End

///Debug
/*
always@(posedge front_clk)begin
    if(in_valid)begin
        $display("input data %x, sop %x, eop %x, empty %d",
            in_data,in_sop,in_eop,in_empty);
    end

    if(!in_meta_ready)begin
        $display("string_matcher_meta_fifo full!");
    end
end
always@(posedge back_clk)begin
    if(out_valid)begin
        $display("output Data %x",out_data);
    end
end
*/
`endif
	
endmodule //top


