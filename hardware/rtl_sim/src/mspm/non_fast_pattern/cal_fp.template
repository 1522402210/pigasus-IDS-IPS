`include "./src/struct_s.sv"
module cal_fp(
    input clk,
    input rst,
    output logic [FP_WIDTH-1:0] fp_data,
    output logic                fp_valid,
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,context['byte_size']) %}
    input [NF_WIDTH-1:0] din_{{i}}_{{j}},
    input din_valid_{{i}}_{{j}},
{% endfor %}
{% endfor %}
    input  last
);

//L1
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,context['byte_size']) %}
logic [BUCKET_BITS-1:0] index_trunc_{{i}}_{{j}};
logic [BUCKET_WIDTH-1:0] l1_sub_fp_{{i}}_{{j}};
logic                    l1_valid_{{i}}_{{j}};
{% endfor %}
{% endfor %}

//L2
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,context['half_byte_size']) %}
logic [BUCKET_WIDTH-1:0] l2_sub_fp_{{i}}_{{j}};
logic                    l2_valid_{{i}}_{{j}};
{% endfor %}
{% endfor %}

//L3
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,4) %}
logic [BUCKET_WIDTH-1:0] l3_sub_fp_{{i}}_{{j}};
logic                    l3_valid_{{i}}_{{j}};
{% endfor %}
{% endfor %}

//L4
{% for i in range(0,context['bucket_size']) %}
logic [BUCKET_WIDTH-1:0] l4_sub_fp_{{i}};
logic                    l4_valid_{{i}};
{% endfor %}

//L5
{% for i in range(0,context['bucket_size']) %}
logic [BUCKET_WIDTH-1:0] sub_fp_{{i}};
{% endfor %}

logic last_r1;
logic last_r2;
logic last_r3;
logic last_r4;

{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size']) %}
assign index_trunc_{{i}}_{{j}} = din_{{i}}_{{j}}[BUCKET_BITS-1:0];
{% endfor %}
{% endfor %}


//Layer 1
always@(posedge clk)begin
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size']) %}
    l1_sub_fp_{{i}}_{{j}} <= 0;
    l1_valid_{{i}}_{{j}} <= 0;
    if(din_valid_{{i}}_{{j}})begin
        l1_sub_fp_{{i}}_{{j}} <= 1 << index_trunc_{{i}}_{{j}};
        l1_valid_{{i}}_{{j}} <= 1;
    end
{% endfor %}
{% endfor %}
end

//Layer 2
always@(posedge clk)begin
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,context['half_byte_size']) %}
    l2_sub_fp_{{i}}_{{j}} <= 0;
    l2_valid_{{i}}_{{j}}  <= 0;
    if(l1_valid_{{i}}_{{2*j}} | l1_valid_{{i}}_{{2*j+1}})begin
        l2_sub_fp_{{i}}_{{j}} <= l1_sub_fp_{{i}}_{{2*j}} | l1_sub_fp_{{i}}_{{2*j+1}};
        l2_valid_{{i}}_{{j}} <= 1;
    end
{% endfor %}
{% endfor %}
end

//Layer 3
always@(posedge clk)begin
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,4) %}
    l3_sub_fp_{{i}}_{{j}} <= 0;
    l3_valid_{{i}}_{{j}}  <= 0;
    if(l2_valid_{{i}}_{{2*j}} | l2_valid_{{i}}_{{2*j+1}})begin
        l3_sub_fp_{{i}}_{{j}} <= l2_sub_fp_{{i}}_{{2*j}} | l2_sub_fp_{{i}}_{{2*j+1}};
        l3_valid_{{i}}_{{j}} <= 1;
    end
{% endfor %}
{% endfor %}
end

//Layer 4
always@(posedge clk)begin
{% for i in range(0,context['bucket_size']) %}
    l4_sub_fp_{{i}} <= 0;
    l4_valid_{{i}}  <= 0;
    if(l3_valid_{{i}}_0 | l3_valid_{{i}}_1 |
       l3_valid_{{i}}_2 | l3_valid_{{i}}_3 )begin
        l4_sub_fp_{{i}} <= l3_sub_fp_{{i}}_0 | l3_sub_fp_{{i}}_1 |
                          l3_sub_fp_{{i}}_2 | l3_sub_fp_{{i}}_3;
        l4_valid_{{i}} <= 1;
    end
{% endfor %}
end

//Layer 5, accumulate
always@(posedge clk)begin
    if(rst)begin
{% for i in range(0,context['bucket_size']) %}
        sub_fp_{{i}} <= 0;
{% endfor %}
    end else begin
{% for i in range(0,context['bucket_size']) %}
        if(last_r4)begin
            sub_fp_{{i}} <= 0;
        end else if (l4_valid_{{i}})begin
            sub_fp_{{i}} <= sub_fp_{{i}} | l4_sub_fp_{{i}};
        end
{% endfor %}
    end
end


//generate fp
always@(posedge clk)begin
    if(rst)begin
        fp_valid <= 0;
        last_r1  <= 0;
        last_r2  <= 0;
        last_r3  <= 0;
        last_r4  <= 0;
    end else begin
        last_r1 <= last;
        last_r2 <= last_r1;
        last_r3 <= last_r2;
        last_r4 <= last_r3;

        fp_valid <= last_r4;
    end
{% for i in range(0,context['bucket_size'])%}
    fp_data[({{i}}+1)*BUCKET_WIDTH-1:{{i}}*BUCKET_WIDTH] <= sub_fp_{{i}};
{% endfor %}
end


endmodule

