`include "./src/struct_s.sv"
module rule_reduction(
    input clk,
    input rst,
    input [127:0] rule_data,
    input         rule_valid,
    input         rule_eop,
    output logic  rule_ready,
    output rule_nf_t rule_out_data_0,
    output logic     rule_out_valid_0,
    input  logic     rule_out_ready_0,
    output rule_nf_t rule_out_data_1,
    output logic     rule_out_valid_1,
    input  logic     rule_out_ready_1
);

localparam L1_FIFO_DEPTH = 64;
localparam L1_TH = (L1_FIFO_DEPTH-24);

{% for i in range(0,context['bucket_size']) %}
logic [RULE_AWIDTH-1:0] l1_cache_{{i}};
logic [RULE_AWIDTH-1:0] rule_data_{{i}};
rule_nf_t    l1_in_data_{{i}};
logic        l1_in_valid_{{i}};
logic        l1_in_ready_{{i}};
rule_nf_t    l1_out_data_{{i}};
logic        l1_out_valid_{{i}};
logic        l1_out_ready_{{i}};
logic        l1_almost_full_{{i}};
logic [31:0] l1_csr_readdata_{{i}};
{% endfor %}

{% for i in range(0,2) %}
logic        l1_all_last_{{i}};
logic [3:0]  l1_req_{{i}};
logic [3:0]  l1_grant_{{i}};
rule_nf_t    l2_in_data_{{i}};
logic        l2_in_valid_{{i}};
logic        l2_in_ready_{{i}};
logic        l2_almost_full_{{i}};
logic [31:0] l2_csr_readdata_{{i}};
{% endfor %}
{% for i in range(0,context['bucket_size']) %}
assign rule_data_{{i}} = rule_data[{{i}}*16+RULE_AWIDTH-1:{{i}}*16];
{% endfor %}

//push data into FIFO
always @(posedge clk)begin
    if(rst)begin
{% for i in range(0,context['bucket_size']) %}
        l1_in_valid_{{i}} <= 0;
        l1_cache_{{i}} <= 0;
{% endfor %}
    end else begin
{% for i in range(0,context['bucket_size']) %}
    l1_in_data_{{i}}.data <= rule_data_{{i}};
    l1_in_data_{{i}}.last <= rule_eop;

    l1_in_valid_{{i}} <= 0;
    if(rule_valid & rule_ready)begin
        if(rule_eop)begin
            l1_in_valid_{{i}} <= 1;
            l1_cache_{{i}} <= 0;
        end else if ((rule_data_{{i}} !=0) &  
            (rule_data_{{i}} !=l1_cache_{{i}}))begin
            l1_in_valid_{{i}} <= 1;
            l1_cache_{{i}} <= rule_data_{{i}};
        end
    end
{% endfor %}
    end
end
assign rule_ready = {% for i in range(0,context['bucket_size']) %} (!l1_almost_full_{{i}})& {% endfor %} 1;

{% for i in range(0,2) %}
assign l1_all_last_{{i}} = {% for k in range(0,4) %} (l1_out_data_{{4*i+k}}.last & l1_out_valid_{{4*i+k}}) & {% endfor %} !l2_almost_full_{{i}};

//generate request, combinationally logic
always @(*)begin
{% for k in range(0,4) %}
    l1_req_{{i}}[{{k}}] = l1_out_valid_{{4*i+k}} & !l1_out_data_{{4*i+k}}.last & !l2_almost_full_{{i}};
    l1_out_ready_{{4*i+k}}  = l1_grant_{{i}}[{{k}}];       
{% endfor %}
    //sync case
    if(l1_all_last_{{i}}) begin
        l1_req_{{i}} = 0;
{% for k in range(0,4) %}
        l1_out_ready_{{4*i+k}} = 1;
{% endfor %}
    end
end

                    
//dequeue FIFO and write to next FIFO
always @(posedge clk)begin
    if(rst)begin
        l2_in_valid_{{i}} <= 0;
    end else begin
        //sync case
        if(l1_all_last_{{i}}) begin
            l2_in_valid_{{i}} <= 1;
        //normal case
        end else begin
            l2_in_valid_{{i}} <= |l1_grant_{{i}};
        end
    end
    //sync case
    if(l1_all_last_{{i}}) begin
        l2_in_data_{{i}}.last <= 1;
        l2_in_data_{{i}}.data <= 0;
    //normal case
    end else begin
        case(l1_grant_{{i}})
            4'b0001: l2_in_data_{{i}} <= l1_out_data_{{4*i}};
            4'b0010: l2_in_data_{{i}} <= l1_out_data_{{4*i+1}};
            4'b0100: l2_in_data_{{i}} <= l1_out_data_{{4*i+2}};
            4'b1000: l2_in_data_{{i}} <= l1_out_data_{{4*i+3}};
            default: l2_in_data_{{i}} <= 0;
        endcase
    end   
end
{% endfor %}



//L1 FIFO
{% for i in range(0,context['bucket_size']) %}
fifo_wrapper_infill_mlab #(
    .SYMBOLS_PER_BEAT(1),
    .BITS_PER_SYMBOL(RULE_NF_WIDTH),
    .FIFO_DEPTH(L1_FIFO_DEPTH)
)
l1_fifo_mlab_{{i}} (
    .clk                 (clk),                 
    .reset               (rst),        
    .csr_address         (0),
    .csr_read            (1'b1),
    .csr_write           (1'b0),
    .csr_readdata        (l1_csr_readdata_{{i}}),
    .csr_writedata       (0),
    .in_data             (l1_in_data_{{i}}),              
    .in_valid            (l1_in_valid_{{i}}),             
    .in_ready            (l1_in_ready_{{i}}),             
    .out_data            (l1_out_data_{{i}}),              
    .out_valid           (l1_out_valid_{{i}}),             
    .out_ready           (l1_out_ready_{{i}})             
);

dc_back_pressure #(
    .FULL_LEVEL(L1_TH)
)
l1_bp_{{i}} (
    .clk            (clk),
    .rst            (rst),
    .csr_address    (),
    .csr_read       (),
    .csr_write      (),
    .csr_readdata   (l1_csr_readdata_{{i}}),
    .csr_writedata  (),
    .almost_full    (l1_almost_full_{{i}})
);
{% endfor %}


//L2 FIFO
{% for i in range(0,2) %}
fifo_wrapper_infill_mlab #(
    .SYMBOLS_PER_BEAT(1),
    .BITS_PER_SYMBOL(RULE_NF_WIDTH),
    .FIFO_DEPTH(L1_FIFO_DEPTH)
)
l2_fifo_mlab_{{i}} (
    .clk                 (clk),                 
    .reset               (rst),        
    .csr_address         (0),
    .csr_read            (1'b1),
    .csr_write           (1'b0),
    .csr_readdata        (l2_csr_readdata_{{i}}),
    .csr_writedata       (0),
    .in_data             (l2_in_data_{{i}}),              
    .in_valid            (l2_in_valid_{{i}}),             
    .in_ready            (l2_in_ready_{{i}}),             
    .out_data            (rule_out_data_{{i}}),              
    .out_valid           (rule_out_valid_{{i}}),             
    .out_ready           (rule_out_ready_{{i}})             
);

dc_back_pressure #(
    .FULL_LEVEL(L1_TH)
)
l2_bp_{{i}} (
    .clk            (clk),
    .rst            (rst),
    .csr_address    (),
    .csr_read       (),
    .csr_write      (),
    .csr_readdata   (l2_csr_readdata_{{i}}),
    .csr_writedata  (),
    .almost_full    (l2_almost_full_{{i}})
);

rr_arbiter_4 #(
    .DWIDTH(4)
)
l2_arb_{{i}}(
    .clk    (clk),
    .rst    (rst),
    .req    (l1_req_{{i}}),
    .grant  (l1_grant_{{i}})
);


{% endfor %}


endmodule

